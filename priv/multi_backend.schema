{mapping, "multi_backend.default", "riak_kv.multi_backend_default", [
  {level, advanced}
]}.

{translation, 
 "riak_kv.multi_backend_default", 
 fun(Conf) -> 
  list_to_binary(cuttlefish_util:conf_get_value(["multi_backend", "default"], Conf))
 end}.

%% Riak KV config
%% @doc Storage_backend specifies the Erlang module defining the storage
%% mechanism that will be used on this node.
{mapping, "multi_backend.$name.storage_backend", "riak_kv.multi_backend", [
  {default, bitcask},
  {datatype, {enum, [bitcask, leveldb, memory]}},
  {level, advanced}
]}.

{translation,
 "riak_kv.multi_backend",
 fun(Conf, Schema) ->
  %% group by $name into list, also cut the "multi_backend.$name" off every key
  BackendNames = cuttlefish_util:matches_for_variable_def(["multi_backend","$name","storage_backend"], Conf),
  %% for each in list, case statement on backend type
  [ begin
    BackendConfigName = ["multi_backend", Name],
    {BackendModule, BackendConfig} = case cuttlefish_util:conf_get_value(BackendConfigName ++ ["storage_backend"], Conf) of
      bitcask ->
        BackendConfigPrefix = BackendConfigName ++ ["bitcask"],
        SubConf = [ begin
          {Key -- BackendConfigName, Value}
        end || {Key, Value} <- cuttlefish_util:filter_by_variable_starts_with(BackendConfigPrefix, Conf)],

        BackendProplist = cuttlefish_generator:map(Schema, SubConf),

        {riak_kv_bitcask_backend, proplists:get_value(bitcask, BackendProplist)};
      leveldb ->
        BackendConfigPrefix = BackendConfigName ++ ["leveldb"],
        SubConf = [ begin
          {Key -- BackendConfigName, Value}
        end || {Key, Value} <- cuttlefish_util:filter_by_variable_starts_with(BackendConfigPrefix, Conf)],

        BackendProplist = cuttlefish_generator:map(Schema, SubConf),

        {riak_kv_eleveldb_backend, proplists:get_value(eleveldb, BackendProplist)};
      memory ->
        BackendConfigPrefix = BackendConfigName ++ ["memory_backend"],
        SubConf = [ begin
          {Key -- BackendConfigName, Value}
        end || {Key, Value} <- cuttlefish_util:filter_by_variable_starts_with(BackendConfigPrefix, Conf)],
        BackendProplist = cuttlefish_generator:map(Schema, SubConf),
        {riak_kv_memory_backend, proplists:get_value(memory_backend, proplists:get_value(riak_kv, BackendProplist))};
      _ -> oops_all_berries
    end,
    {list_to_binary(Name),  BackendModule, BackendConfig}
  end || {"$name", Name} <- BackendNames]
 end
}.

%%%% Memory backend section

{mapping, "multi_backend.$name.memory_backend.max_memory", "riak_kv.multi_backend", [
  {datatype, bytesize},
  {default, "4GB"},
  {level, advanced}
]}.

{mapping, "multi_backend.$name.memory_backend.ttl", "riak_kv.multi_backend", [
  {datatype, {duration, s}},
  {commented, "1d"}, %% no default, it's undefined.
  {level, advanced}
]}.
