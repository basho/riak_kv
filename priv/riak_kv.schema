%%-*- mode: erlang -*-
%% Slightly more complex mapping with translation layer
%% @doc enable active anti-entropy subsystem
{mapping, "anti_entropy", "riak_kv.anti_entropy", [
  {datatype, {enum, [on, off, debug]}},
  {default, on}
]}.

{ translation,
  "riak_kv.anti_entropy",
  fun(Conf) ->
    Setting = cuttlefish:conf_get("anti_entropy", Conf),
    case Setting of
      on -> {on, []};
      debug -> {on, [debug]};
      off -> {off, []};
      _Default -> {on, []}
    end
  end
}.

%% Riak KV config

%% @doc storage_backend specifies the engine used for Riak's key-value
%% data and secondary indexes (if supported). Note the 'yessir' option
%% is for testing only.
%%
%% Valid values are:
%%    bitcask, leveldb, memory, yessir, multi
{mapping, "storage_backend", "riak_kv.storage_backend", [
  {default, {{storage_backend}} },
  {datatype, {enum, [bitcask, leveldb, memory, yessir, multi]}}
]}.

{ translation,
  "riak_kv.storage_backend",
  fun(Conf) ->
    Setting = cuttlefish:conf_get("storage_backend", Conf),
    case Setting of
      bitcask -> riak_kv_bitcask_backend;
      leveldb -> riak_kv_eleveldb_backend;
      memory -> riak_kv_memory_backend;
      yessir -> riak_kv_yessir_backend;
      multi -> riak_kv_multi_backend;
      _Default -> riak_kv_bitcask_backend
    end
  end}.

%% @doc raw_name is the first part of all URLS used by the Riak raw HTTP
%% interface.  See riak_web.erl and raw_http_resource.erl for
%% details.
{mapping, "raw_name", "riak_kv.raw_name", [
  {default, "riak"},
  {commented, "riak"}
]}.

%% @doc Restrict how fast AAE can build hash trees. Building the tree
%% for a given partition requires a full scan over that partition's
%% data. Once built, trees stay built until they are expired.
%% Config is of the form:
%%   {num-builds, per-timespan}
%% Default is 1 build per hour.
{mapping, "anti_entropy.build_limit.number", "riak_kv.anti_entropy_build_limit", [
  {default, 1},
  {datatype, integer}
]}.

{mapping, "anti_entropy.build_limit.per_timespan", "riak_kv.anti_entropy_build_limit", [
  {default, "1h"},
  {datatype, {duration, ms}}
]}.

{translation,
 "riak_kv.anti_entropy_build_limit",
 fun(Conf) ->
    {cuttlefish:conf_get("anti_entropy.build_limit.number", Conf),
     cuttlefish:conf_get("anti_entropy.build_limit.per_timespan", Conf)}
 end}.

%% @doc Determine how often hash trees are expired after being built.
%% Periodically expiring a hash tree ensures the on-disk hash tree
%% data stays consistent with the actual k/v backend data. It also
%% helps Riak identify silent disk failures and bit rot. However,
%% expiration is not needed for normal AAE operation and should be
%% infrequent for performance reasons. The time is specified in
%% milliseconds. The default is 1 week.
{mapping, "anti_entropy.expire", "riak_kv.anti_entropy_expire", [
  {default, "1w"},
  {datatype, {duration, ms}}
]}.

%% @doc Limit how many AAE exchanges/builds can happen concurrently.
{mapping, "anti_entropy.concurrency", "riak_kv.anti_entropy_concurrency", [
  {default, 2},
  {datatype, integer}
]}.

%% @doc The tick determines how often the AAE manager looks for work
%% to do (building/expiring trees, triggering exchanges, etc).
%% The default is every 15 seconds. Lowering this value will
%% speedup the rate that all replicas are synced across the cluster.
%% Increasing the value is not recommended.
{mapping, "anti_entropy.tick", "riak_kv.anti_entropy_tick", [
  {default, "15s"},
  {datatype, {duration, ms}}
]}.

%% @doc The directory where AAE hash trees are stored.
{mapping, "anti_entropy.data_dir", "riak_kv.anti_entropy_data_dir", [
  {default, "{{platform_data_dir}}/anti_entropy"}
]}.

%% @doc The LevelDB options used by AAE to generate the LevelDB-backed
%% on-disk hashtrees.
{mapping, "anti_entropy.write_buffer_size", "riak_kv.anti_entropy_leveldb_opts.write_buffer_size", [
  {default, "4MB"},
  {datatype, bytesize}
]}.

{mapping, "anti_entropy.max_open_files", "riak_kv.anti_entropy_leveldb_opts.max_open_files", [
  {default, 20},
  {datatype, integer}
]}.

%% @doc mapred_name is URL used to submit map/reduce requests to Riak.
{mapping, "mapred_name", "riak_kv.mapred_name",  [
  {default, "mapred"}
]}.

%% @doc mapred_2i_pipe indicates whether secondary-index
%% MapReduce inputs are queued in parallel via their own
%% pipe ('true'), or serially via a helper process
%% ('false' or undefined).  Set to 'false' or leave
%% undefined during a rolling upgrade from 1.0.
{mapping, "mapred_2i_pipe", "riak_kv.mapred_2i_pipe", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "riak_kv.mapred_2i_pipe",
  fun(Conf) ->
    Setting = cuttlefish:conf_get("mapred_2i_pipe", Conf),
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
  end}.
%% @doc Each of the following entries control how many Javascript
%% virtual machines are available for executing map, reduce,
%% pre- and post-commit hook functions.
%% @datatype integer
%% @mapping
{mapping, "javascript_vm.map_count", "riak_kv.map_js_vm_count", [
  {default, {{map_js_vms}} },
  {datatype, integer}
]}.
{mapping, "javascript_vm.reduce_count", "riak_kv.reduce_js_vm_count", [
  {default, {{reduce_js_vms}} },
  {datatype, integer}
]}.
{mapping, "javascript_vm.hook_count", "riak_kv.hook_js_vm_count", [
  {default, {{hook_js_vms}} },
  {datatype, integer}
]}.

%% @doc js_max_vm_mem is the maximum amount of memory, in megabytes,
%% allocated to the Javascript VMs. If unset, the default is
%% 8MB.
{mapping, "javascript_vm.max_vm_mem", "riak_kv.js_max_vm_mem", [
  {default, 8},
  {datatype, integer}
]}.

%% @doc js_thread_stack is the maximum amount of thread stack, in megabyes,
%% allocate to the Javascript VMs. If unset, the default is 16MB.
%% NOTE: This is not the same as the C thread stack.
{mapping, "javascript_vm.thread_stack", "riak_kv.js_thread_stack", [
  {default, 16},
  {datatype, integer}
]}.

%% @doc js_source_dir should point to a directory containing Javascript
%% source files which will be loaded by Riak when it initializes
%% Javascript VMs.
{mapping, "javascript_vm.source_dir", "riak_kv.js_source_dir", [
  {commented, "/tmp/js_source"}
]}.

%% @doc http_url_encoding determines how Riak treats URL encoded
%% buckets, keys, and links over the REST API. When set to 'on'
%% Riak always decodes encoded values sent as URLs and Headers.
%% Otherwise, Riak defaults to compatibility mode where links
%% are decoded, but buckets and keys are not. The compatibility
%% mode will be removed in a future release.
{mapping, "http_url_encoding", "riak_kv.http_url_encoding", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

%% @doc Switch to vnode-based vclocks rather than client ids.  This
%% significantly reduces the number of vclock entries.
%% Only set on if *all* nodes in the cluster are upgraded to 1.0
{mapping, "vnode_vclocks", "riak_kv.vnode_vclocks", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "riak_kv.vnode_vclocks",
  fun(Conf) ->
    Setting = cuttlefish:conf_get("vnode_vclocks", Conf),
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
  end}.

%% @doc This option toggles compatibility of keylisting with 1.0
%% and earlier versions.  Once a rolling upgrade to a version
%% > 1.0 is completed for a cluster, this should be set to
%% true for better control of memory usage during key listing
%% operations
{mapping, "listkeys_backpressure", "riak_kv.listkeys_backpressure", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "riak_kv.listkeys_backpressure",
  fun(Conf) ->
    Setting = cuttlefish:conf_get("listkeys_backpressure", Conf),
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
  end}.

%% @doc This option specifies how many of each type of fsm may exist
%% concurrently.  This is for overload protection and is a new
%% mechanism that obsoletes 1.3's health checks. Note that this number
%% represents two potential processes, so +P in vm.args should be at
%% least 3X the fsm_limit. Setting this value to undefined disables
%% fsm overload protection.
{mapping, "fsm_limit", "riak_kv.fsm_limit", [
  {default, 50000},
  {datatype, [integer, {atom, undefined}]}
]}.

%% @doc retry_put_coordinator_failure will enable/disable the
%% 'retry_put_coordinator_failure' per-operation option of the
%% put FSM.
%% on = Riak 2.0 behavior (strongly recommended)
%% off = Riak 1.x behavior
{mapping, "retry_put_coordinator_failure", "riak_kv.retry_put_coordinator_failure", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

%% @doc object_format controls which binary representation of a riak_object
%% is stored on disk.
%% Current options are: v0, v1.
%% v0: Original erlang:term_to_binary format. Higher space overhead.
%% v1: New format for more compact storage of small values.
{mapping, "object_format", "riak_kv.object_format", [
  {default, v1},
  {datatype, {enum, [v0, v1]}}
]}.

%% @doc md_cache_size controls how large the md cache is allowed to be
%% it defaults to 1MB, set to 0 to disable the cache.  This shouldn't 
%% be neccessary on-disk based backends, but can help performance in some
%% cases (i.e. memory backend, data fits in block cache, etc).
%% note that this is the size of the ETS table, rather than the actual data,
%% to keep the size calculation simple, thus more space may be used than 
%% the simple size * vnode_count calculation would imply.
{mapping, "md_cache_size", "riak_kv.vnode_md_cache_size", [
  {datatype, bytesize},
  {default, "0"} %% disabled by default, to ship with this live, change to 512KB
]}.


%%%% Memory backend section

%% @doc memory_backend.max_memory was historically configured in terms of
%% megabytes. Anything less than 1MB here will round up to 1MB. Any integer
%% without a unit will be interpreted as bytes. An app.config setting of
%% 1024 is equivalent to 1GB or 1024MB.
{mapping, "memory_backend.max_memory", "riak_kv.memory_backend.max_memory", [
  {datatype, bytesize},
  {default, "4GB"},
  {level, advanced}
]}.

{translation,
 "riak_kv.memory_backend.max_memory",
 fun(Conf) ->
  Bytes = cuttlefish:conf_get("memory_backend.max_memory", Conf),
  cuttlefish_util:ceiling(Bytes / 1048576)
 end
}.

{mapping, "memory_backend.ttl", "riak_kv.memory_backend.ttl", [
  {datatype, {duration, s}},
  {commented, "1d"}, %% no default, it's undefined.
  {level, advanced}
]}.

%% @doc Measures were added to Riak 1.2 to counteract cross-site scripting
%% and request-forgery attacks. Some reverse-proxies cannot remove the Referer
%% header and makes serving data directly from Riak impossible. Turning
%% secure_referer_check = off disables this security check
{mapping, "secure_referer_check", "riak_kv.secure_referer_check", [
  {datatype, {enum, [on, off]}},
  {default, on},
  {level, advanced}
]}.

{translation,
 "riak_kv.secure_referer_check",
 fun(Conf) ->
  case cuttlefish:conf_get("secure_referer_check", Conf) of
    off -> false;
    on -> true;
    _ -> true
  end
 end
}.

%% @doc Reading or writing objects bigger than this size will write
%% a warning in the logs.
{mapping, "warn_object_size", "riak_kv.warn_object_size", [
  {datatype, bytesize},
  {default, "5MB"}
]}.

%% @doc Writing an object bigger than this will fail.
{mapping, "max_object_size", "riak_kv.max_object_size", [
  {datatype, bytesize},
  {default, "50MB"}
]}.

%% @doc Writing an object with more than this number of siblings
%% will generate a warning in the logs.
{mapping, "warn_siblings", "riak_kv.warn_siblings", [
  {datatype, integer},
  {default, 25}
]}.

%% @doc Writing an object with more than this number of siblings
%% will fail.
{mapping, "max_siblings", "riak_kv.max_siblings", [
  {datatype, integer},
  {default, 100}
]}.

%% @doc dvv is an enhancement to riak's logical clocks that prevents
%% sibling explosion by storing an event in a value's metadata on
%% creation. Riak later later uses that event information on merging
%% conflicting writes to ensure that only genuinely concurrent values
%% remain. DVV is enabled by default. As it is a new feature, you can
%% switch it off.

{mapping, "dvv", "riak_kv.dvv_enabled", [
  {default, on},
  {datatype, {enum, [on, off]}},
  {level, advanced}
]}.

{ translation,
  "riak_kv.dvv_enabled",
  fun(Conf) ->
    Setting = cuttlefish_util:conf_get_value("dvv", Conf),
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
  end}.
