%% -------------------------------------------------------------------
%%
%% Copyright (c) 2011 Basho Technologies, Inc.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

%% @doc List the keys stored on the local Riak KV vnode sharing the
%%      same index as the pipe vnode owning this worker.  This is the
%%      same idea as riak_kv_pipe_get, but with the `listkeys'
%%      operation instead of `get'.
%%
%%      Inputs to this worker may be either `Bucket :: binary()' or
%%      `{Bucket :: binary, Filters :: list()}'.  The former is
%%      syntactic sugar for `{Bucket, []}' (an empty filter list).
%%      Each filter should be a `{Mod, Fun, Arg}' tuples.
%%
%%      This fitting also understands cover input, as generated by
%%      `riak_pipe_qcover_fsm'.  When processing cover input, the
%%      `FilterVNodes' parameter is passed along to the KV vnode for
%%      filtering there.  (When not processing cover input, the KV
%%      vnode is passed an empty `FilterVNodes' list.)
%%
%%      The convenience function `queue_existing_pipe/3' can be used
%%      to list the keys of a bucket directly into an existing pipe.

-module(riak_kv_pipe_listkeys).
-behaviour(riak_pipe_vnode_worker).

-export([init/2,
         process/3,
         done/1,
         queue_existing_pipe/3]).

-include_lib("riak_pipe/include/riak_pipe.hrl").
-include_lib("riak_pipe/include/riak_pipe_log.hrl").

-record(state, {p :: riak_pipe_vnode:partition(),
                fd :: riak_pipe_fitting:details()}).
-opaque state() :: #state{}.

%% @doc Init just stashes the `Partition' and `FittingDetails' for later.
-spec init(riak_pipe_vnode:partition(), riak_pipe_fitting:details()) ->
         {ok, state()}.
init(Partition, FittingDetails) ->
    {ok, #state{p=Partition, fd=FittingDetails}}.

%% @doc Process lists keys from the KV vnode, according to the input
%%      bucket +/- filter.
-spec process(term(), boolean(), state()) -> {ok | {error, term()}, state()}.
process(Input, _Last, #state{p=Partition, fd=FittingDetails}=State) ->
    case Input of
        {cover, FilterVNodes, {Bucket, Filters}} ->
            ok;
        {cover, FilterVNodes, Bucket} ->
            Filters = [];
        {Bucket, Filters} ->
            FilterVNodes = [];
        Bucket ->
            Filters = [],
            FilterVNodes = []
    end,
    ReqId = erlang:phash2({self(), os:timestamp()}), % stolen from riak_client
    riak_core_vnode_master:coverage(
      riak_kv_keys_fsm:req(Bucket, Filters),
      {Partition, node()},
      FilterVNodes,
      {raw, ReqId, self()},
      riak_kv_vnode_master),
    Result = keysend_loop(ReqId, Partition, FittingDetails),
    {Result, State}.

keysend_loop(ReqId, Partition, FittingDetails) ->
    receive
        {ReqId, {From, Bucket, Keys}} ->
            Result = keysend(Bucket, Keys, Partition, FittingDetails),
            case Result of
                ok ->
                    riak_kv_vnode:ack_keys(From),
                    keysend_loop(ReqId, Partition, FittingDetails);
                Error ->
                    Error
            end;
        {ReqId, {Bucket, Keys}} ->
            Result = keysend(Bucket, Keys, Partition, FittingDetails),
            case Result of
                ok ->
                    keysend_loop(ReqId, Partition, FittingDetails);
                Error ->
                    Error
            end;
        {ReqId, done} ->
            ok
    end.

keysend(_Bucket, [], _Partition, _FittingDetails) ->
    ok;
keysend(Bucket, [Key | Keys], Partition, FittingDetails) ->
    case riak_pipe_vnode_worker:send_output(
           {Bucket, Key}, Partition, FittingDetails) of
        ok ->
            keysend(Bucket, Keys, Partition, FittingDetails);
        ER ->
            ER
    end.

%% @doc Unused.
-spec done(state()) -> ok.
done(_State) ->
    ok.

%% Convenience

-type bucket_or_filter() :: binary() | {binary(), list()}.

%% @doc List the keys from a bucket, and send them as inputs to the
%%      given pipe.  This starts a new pipe with one fitting
%%      (`riak_kv_pipe_listkeys'), with its sink pointed at the
%%      destination pipe.  The `riak_pipe_qcover_fsm' module is used
%%      to trigger keylisting on the appropriate vnodes.  The `eoi'
%%      message is sent to the pipe as soon as it is confirmed that
%%      all keylisting processes have started.
%%
%%      Note that log/trace messages are sent to the sink of the
%%      original pipe. It is expected that that sink is an `fsm' type.
-spec queue_existing_pipe(riak_pipe:pipe(),
                          bucket_or_filter(),
                          timeout()) ->
         ok | {error, Reason :: term()}.
queue_existing_pipe(Pipe, Bucket, Timeout) ->
    %% make our tiny pipe
    [{_Name, Head}|_] = Pipe#pipe.fittings,
    Period = riak_kv_mrc_pipe:sink_sync_period(),
    {ok, LKP} = riak_pipe:exec([#fitting_spec{name=listkeys,
                                              module=?MODULE,
                                              nval=1}],
                               [{sink, Head},
                                {trace, [error]},
                                {log, {sink, Pipe#pipe.sink}},
                                {sink_type, {fsm, Period, infinity}}]),

    %% setup the cover operation
    ReqId = erlang:phash2({self(), os:timestamp()}), %% stolen from riak_client
    BucketProps = riak_core_bucket:get_bucket(Bucket),
    NVal = proplists:get_value(n_val, BucketProps),
    {ok, Sender} = riak_pipe_qcover_sup:start_qcover_fsm(
                     [{raw, ReqId, self()},
                      [LKP, Bucket, NVal]]),

    %% wait for cover to hit everything
    {RealTO, TOReason} =
        try erlang:link(Sender) of
            true ->
                %% Sender was alive - wait as expected
                {Timeout, timeout}
        catch error:noproc ->
                %% Sender finished early; it's always spawned locally,
                %% so we'll get a noproc exit, instead of an exit signal

                %% messages had better already be in our mailbox,
                %% don't wait any extra time for them
                {0,
                 %% we'll have no idea what its failure was, unless it
                 %% sent us an error message
                 listkeys_coverage_failure}
        end,

    receive
        {ReqId, done} ->
            %% this eoi will flow into the other pipe
            riak_pipe:eoi(LKP),
            ok;
        {ReqId, Error} ->
            %% this destroy should not harm the other pipe
            riak_pipe:destroy(LKP),
            Error
    after RealTO ->
            %% this destroy should not harm the other pipe
            riak_pipe:destroy(LKP),
            {error, TOReason}
    end.
